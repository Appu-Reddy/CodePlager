const mongoose = require("mongoose");
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcrypt');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

const Student = require("./models/student");
const Teacher = require("./models/teacher");
const Assignment = require("./models/assignment");
const Submission = require("./models/submission");

mongoose.connect("mongodb+srv://Vivek:Vivek2006@cluster0.fqmud7r.mongodb.net/");
const db = mongoose.connection;

db.on('error', console.error.bind(console, 'error connecting mongodb'));
db.once('open', () => {
    console.log('Connected to mongodb');
});

app.get('/api/hello', (req, res) => {
    res.json({ message: 'hello from h-1' });
});

app.post('/api/addStudent', async (req, res) => {
    try {
        const { rollNo, name, pass } = req.body;
        const existingStudent = await Student.findOne({ rollNo });
        if (existingStudent) {
            return res.status(409).json({ message: 'Student with this roll number already exists' });
        }
        const hashedPassword = await bcrypt.hash(pass, 10);
        const newStudent = new Student({ rollNo, name, pass: hashedPassword });
        await newStudent.save();
        res.status(201).json({ message: 'Student created successfully', student: newStudent });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

app.get('/api/getStudents', async (req, res) => {
    try {
        const students = await Student.find();
        res.json(students);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/student-login', async (req, res) => {
    const { rollNo, pass } = req.body;
    const student = await Student.findOne({ rollNo });
    if (!student) {
        return res.status(404).json({ message: "Student not found" });
    }
    const isMatch = await bcrypt.compare(pass, student.pass);
    if (!isMatch) {
        return res.status(401).json({ message: "Incorrect password" });
    }
    res.status(200).json({ message: "Login successful", rollNo: student.rollNo });
});

app.post('/api/addTeacher', async (req, res) => {
    try {
        const { rollNo, name, pass } = req.body;
        const existingStudent = await Student.findOne({ rollNo });
        if (existingStudent) {
            return res.status(409).json({ message: 'Student with this roll number exists' });
        }
        const existingTeacher = await Teacher.findOne({ rollNo });
        if (existingTeacher) {
            return res.status(409).json({ message: 'Teacher with this roll number already exists' });
        }
        const hashedPassword = await bcrypt.hash(pass, 10);
        const newTeacher = new Teacher({ rollNo, name, pass: hashedPassword });
        await newTeacher.save();
        res.status(201).json({ message: 'Teacher created successfully', Teacher: newTeacher });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

app.get('/api/getTeacher', async (req, res) => {
    try {
        const teachers = await Teacher.find();
        res.json(teachers);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.post('/api/teacher-login', async (req, res) => {
    const { rollNo, pass } = req.body;
    const teacher = await Teacher.findOne({ rollNo });
    if (!teacher) {
        return res.status(404).json({ message: "Teacher not found" });
    }
    const isMatch = await bcrypt.compare(pass, teacher.pass);
    if (!isMatch) {
        return res.status(401).json({ message: "Incorrect password" });
    }
    res.status(200).json({ message: "Login successful", rollNo: teacher.rollNo });
});

const uploadDir = path.join(__dirname, 'uploads', 'assignments');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

const tempStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const timestamp = Date.now();
        const tempFileName = temp_${timestamp}_${file.originalname};
        cb(null, tempFileName);
    }
});

const upload = multer({ storage: tempStorage });

app.post('/api/createAssignment', upload.single('file'), async (req, res) => {
    try {
        const {
            name, course, description, dueDate, status, maxScore,
            teacherRollNo, courseId
        } = req.body;

        const teacher = await Teacher.findOne({ rollNo: teacherRollNo });
        if (!teacher) {
            return res.status(404).json({ error: 'Teacher not found with this roll number' });
        }

        const newAssignment = new Assignment({
            name,
            course,
            description,
            dueDate,
            status,
            maxScore,
            teacherRollNo: teacher.rollNo,
            courseId,
            attachments: req.file ? [{
                fileName: req.file.originalname,
                fileUrl: /uploads/${req.file.filename},
                fileType: path.extname(req.file.originalname),
            }] : []
        });

        await newAssignment.save();
        res.status(201).json({ message: 'Assignment created', assignment: newAssignment });
    } catch (err) {
        res.status(500).json({ error: 'Failed to create assignment' });
    }
});

app.get('/assignments/student/:rollNo', async (req, res) => {
    const { rollNo } = req.params;
    try {
        const assignments = await Assignment.find().sort({ createdAt: -1 });
        const submissions = await Submission.find({ studentRollNo: rollNo });

        const assignmentWithStatus = assignments.map(assign => {
            const submitted = submissions.find(s => String(s.assignmentId) === String(assign._id));
            let status = 'pending';
            let grade = null;
            let submissionDate = null;

            if (submitted) {
                submissionDate = submitted.submittedAt;
                if (submitted.grade !== undefined && submitted.grade !== null) {
                    status = 'graded';
                    grade = submitted.grade;
                } else {
                    status = new Date(assign.dueDate) < new Date(submitted.submittedAt) ? 'late' : 'submitted';
                }
            } else if (new Date(assign.dueDate) < new Date()) {
                status = 'late';
            }

            return {
                _id: assign._id,
                name: assign.name,
                course: assign.course,
                dueDate: assign.dueDate,
                createdAt: assign.createdAt,
                status,
                grade,
                submissionDate,
            };
        });

        res.json(assignmentWithStatus);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch student assignments' });
    }
});

app.delete('/api/deleteAssignment/:id', async (req, res) => {
    try {
        const { id } = req.params;
        await Assignment.findByIdAndDelete(id);
        res.json({ message: 'Assignment deleted successfully' });
    } catch (err) {
        res.status(500).json({ error: 'Failed to delete assignment' });
    }
});

app.get('/api/students/:rollNo', async (req, res) => {
    try {
        const student = await Student.findOne({ rollNo: req.params.rollNo });
        if (!student) {
            return res.status(404).json({ error: "Student not found" });
        }
        res.json({ name: student.name });
    } catch (err) {
        res.status(500).json({ error: "Server error" });
    }
});

app.post('/submitAssignment', upload.single('submissionFile'), async (req, res) => {
    try {
        const { student_name, assignmentId, studentRollNo, status = 'submitted' } = req.body;
        
        if (req.file && student_name && studentRollNo) {
            const oldPath = path.join(uploadDir, req.file.filename);
            const newFileName = ${student_name}_${studentRollNo}_${req.file.originalname};
            const newPath = path.join(uploadDir, newFileName);
            
            fs.renameSync(oldPath, newPath);
            req.file.filename = newFileName;
        }
        
        const assignment = await Assignment.findById(assignmentId);
        if (!assignment) {
            return res.status(404).json({ error: 'Assignment not found' });
        }
        
        if (assignment.status === 'closed' || new Date() > new Date(assignment.dueDate)) {
            return res.status(400).json({ error: 'This assignment is no longer accepting submissions.' });
        }
        
        const existingSubmission = assignment.studentSubmissions.find(
            (sub) => sub.studentRollNo === studentRollNo
        );
        
        if (existingSubmission && existingSubmission.status === 'submitted') {
            return res.status(400).json({ error: 'You have already submitted this assignment.' });
        }

        const submission = {
            studentRollNo,
            status,
            submittedAt: new Date(),
        };
        
        if (req.file) {
            submission.submissionId = new mongoose.Types.ObjectId();
            submission.fileName = req.file.filename;
            submission.fileUrl = /uploads/${req.file.filename};
            submission.fileType = req.file.mimetype;
        }

        assignment.studentSubmissions.push(submission);
        await assignment.save();
        
        res.status(200).json({ message: 'Assignment submitted successfully', submission });
    } catch (error) {
        res.status(500).json({ error: 'Something went wrong while submitting the assignment' });
    }
});

app.get('/api/assignments/:assignmentId', async (req, res) => {
    const { assignmentId } = req.params;
    const { studentId } = req.query;
    if (!studentId) {
        return res.status(400).json({ error: 'Student ID (Roll No) is required' });
    }

    try {
        const student = await Student.findOne({ rollNo: studentId });
        if (!student) {
            return res.status(404).json({ error: 'Student not found' });
        }

        const assignment = await Assignment.findById(assignmentId);
        if (!assignment) {
            return res.status(404).json({ error: 'Assignment not found' });
        }

        const studentSubmission = assignment.studentSubmissions.find(
            (sub) => sub.studentRollNo === studentId
        );

        if (studentSubmission) {
            return res.status(200).json({
                assignment,
                studentSubmission,
                submissionDate: studentSubmission.submittedAt,
                status: studentSubmission.status,
            });
        }

        return res.status(200).json({
            assignment,
            studentSubmission: null,
            status: 'not submitted',
        });
    } catch (error) {
        return res.status(500).json({ error: 'Error fetching assignment data' });
    }
});

app.listen(port, () => {
    console.log(Backend running at ${port});
});